/*******************************************************************************
*   Copyright 2015 Analog Devices, Inc.
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.
********************************************************************************/

package com.analog.lyric.dimple.solvers.gibbs.samplers.block;

import com.analog.lyric.dimple.exceptions.DimpleException;
import com.analog.lyric.dimple.model.values.Value;
import com.analog.lyric.dimple.solvers.core.proposalKernels.BlockProposal;
import com.analog.lyric.dimple.solvers.core.proposalKernels.IBlockProposalKernel;
import com.analog.lyric.dimple.solvers.gibbs.GibbsVariableBlock;

/**
 * Metropolis-Hastings block initializer for {@link GibbsVariableBlock}s.
 * @since 0.08
 * @author Christopher Barber
 */
public class BlockMHInitializer extends BlockMHSampler implements IBlockInitializer
{
	private final GibbsVariableBlock _block;
	
	/*--------------
	 * Construction
	 */
	
	public BlockMHInitializer(GibbsVariableBlock block, IBlockProposalKernel proposalKernel)
	{
		super(proposalKernel);
		_block = block;
	}
	
	/*---------------------------
	 * IBlockInitializer methods
	 */

	/**
	 * {@inheritDoc}
	 * <p>
	 * Intializes variables in block by setting them to values generated by the
	 * {@linkplain #getProposalKernel() proposal kernel}.
	 */
	@Override
	public void initialize()
	{
		final IBlockProposalKernel proposalKernel = _proposalKernel;
		if (proposalKernel == null)
			throw new DimpleException("Must specify a block proposal kernel. No default is defined.");

		final Value[] sampleValue = _block.updateStart();
		
		final BlockProposal proposal = proposalKernel.next(sampleValue, _block.getDomains());
		final Value[] proposalValue = proposal.value;

		_block.updateFinish(proposalValue);
		
		_block.resetCounts();
	}


}
